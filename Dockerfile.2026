# 🚀 DOCKERFILE FUTURISTA 2026
# Multi-stage build optimizado para Next.js + Tecnologías emergentes

# ===============================================
# 🎯 STAGE 1: Base Dependencies
# ===============================================
FROM node:20-alpine AS deps
RUN apk add --no-cache libc6-compat python3 make g++
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./
COPY pnpm-lock.yaml* ./

# Install dependencies with optimal caching
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  else echo "Lockfile not found." && exit 1; \
  fi

# ===============================================
# 🛠️ STAGE 2: Build Application
# ===============================================
FROM node:20-alpine AS builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Environment variables for build
ENV NEXT_TELEMETRY_DISABLED 1
ENV NODE_ENV production

# Build the application
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then pnpm build; \
  else npm run build; \
  fi

# ===============================================
# 🦀 STAGE 3: WebAssembly & Rust (Optional)
# ===============================================
FROM rust:1.75-alpine AS wasm-builder
RUN apk add --no-cache musl-dev
RUN cargo install wasm-pack

WORKDIR /wasm
COPY rust-modules/ ./
RUN wasm-pack build --target web --out-dir ../public/wasm

# ===============================================
# ⛓️ STAGE 4: Blockchain Tools (Optional)
# ===============================================
FROM node:20-alpine AS blockchain-builder
WORKDIR /blockchain

COPY contracts/ ./contracts/
COPY hardhat.config.js ./
COPY package.json ./

RUN npm install hardhat @nomicfoundation/hardhat-toolbox
RUN npx hardhat compile

# ===============================================
# 🚀 STAGE 5: Production Runtime
# ===============================================
FROM node:20-alpine AS runner
WORKDIR /app

# Security: Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static

# Copy WebAssembly modules if they exist
COPY --from=wasm-builder /public/wasm ./public/wasm 2>/dev/null || true

# Copy blockchain artifacts if they exist
COPY --from=blockchain-builder /blockchain/artifacts ./contracts/artifacts 2>/dev/null || true

# Set ownership
RUN chown -R nextjs:nodejs /app
USER nextjs

# Environment
ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1
ENV PORT 3000

EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application
CMD ["node", "server.js"]

# ===============================================
# 📊 LABELS FOR METADATA
# ===============================================
LABEL maintainer="developer@2026.com"
LABEL version="2026.1.0"
LABEL description="Futuristic App with AI, Web3, and Cloud Native technologies"
LABEL org.opencontainers.image.source="https://github.com/your-repo/app-conductores-2026"
LABEL org.opencontainers.image.vendor="Future Tech Corp"
LABEL org.opencontainers.image.licenses="MIT"

# ===============================================
# 🔧 BUILD ARGS FOR CUSTOMIZATION
# ===============================================
ARG BUILDPLATFORM
ARG TARGETPLATFORM
ARG TARGETOS
ARG TARGETARCH

# Multi-architecture support
RUN echo "Building for $TARGETPLATFORM on $BUILDPLATFORM"